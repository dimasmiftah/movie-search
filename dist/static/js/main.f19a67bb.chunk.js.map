{"version":3,"sources":["components/Header.js","components/Search.js","components/Movie.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Search","searchMovie","useState","searchValue","setSearchValue","type","value","onChange","e","target","onClick","preventDefault","Movie","movie","poster","Poster","Title","src","alt","width","Year","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","res","json","resJSON","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAUeA,G,MARA,SAACC,GACd,OACE,4BAAQC,UAAU,cAChB,4BAAKD,EAAME,SCgBFC,EAlBA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACMC,mBAAS,IADf,mBACzBC,EADyB,KACZC,EADY,KAUhC,OACE,0BAAMN,UAAU,UACd,2BAAOO,KAAK,OAAOC,MAAOH,EAAaI,SAVtB,SAACC,GACpBJ,EAAeI,EAAEC,OAAOH,UAUtB,2BAAOD,KAAK,SAASC,MAAM,SAASI,QARnB,SAACF,GACpBA,EAAEG,iBACFV,EAAYE,GACZC,EAAe,SCMJQ,EAbD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACRC,EAA0B,QAAjBD,EAAME,OAHrB,qGAGoEF,EAAME,OAC1E,OACE,yBAAKjB,UAAU,SACb,4BAAKe,EAAMG,OACX,6BACE,yBAAKC,IAAKH,EAAQI,IAAG,4BAAuBL,EAAMG,OAASG,MAAM,SAEnE,+BAAKN,EAAMO,KAAX,O,OCZOC,EAAe,CAC1BC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGHC,EAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOtB,MACb,IAAK,uBACH,OAAO,2BACFqB,GADL,IAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,uBACH,OAAO,2BACFE,GADL,IAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IC0BEI,MA5Cf,WAAgB,IAAD,EACaC,qBAAWN,EAASJ,GADjC,mBACNK,EADM,KACCM,EADD,KAGbC,qBAAU,WACRC,MANkB,kDAOfC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLN,EAAS,CAAC3B,KAAM,uBAAwBuB,QAASU,EAAQtC,cAE5D,IAEH,IAcQuB,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAC9B,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,eACb,kBAAC,EAAD,CAAQE,YAlBQ,SAACE,GACnB6B,EAAS,CAAC3B,KAAM,yBAEhB6B,MAAM,8BAAD,OAA+B/B,EAA/B,qBACFgC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACoB,SAArBA,EAAQC,SACVP,EAAS,CAAC3B,KAAM,uBAAwBuB,QAASU,EAAQtC,SAEzDgC,EAAS,CAAC3B,KAAM,wBAAyBwB,MAAOS,EAAQE,cAU5D,uBAAG1C,UAAU,aAAb,6BACA,yBAAKA,UAAU,UACZwB,IAAYE,EACX,4CACEA,EACF,yBAAK1B,UAAU,gBAAgB0B,GAE/BD,EAAOkB,KAAI,SAAC5B,EAAO6B,GAAR,OAAmB,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc7B,EAAMG,OAASH,MAAOA,UClClE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.f19a67bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n  return (  \r\n    <header className=\"App-header\">\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst Search = ({searchMovie}) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const handleChange = (e) => {\r\n    setSearchValue(e.target.value)\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    searchMovie(searchValue);\r\n    setSearchValue('')\r\n  }\r\n  return (  \r\n    <form className=\"search\">\r\n      <input type=\"text\" value={searchValue} onChange={handleChange}/>\r\n      <input type=\"submit\" value=\"SEARCH\" onClick={handleSubmit}/>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://thumbs.dreamstime.com/b/no-thumbnail-image-placeholder-forums-blogs-websites-148010362.jpg\";\r\n\r\nconst Movie = ({movie}) => {\r\n  const poster = movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n  return (  \r\n    <div className=\"movie\">\r\n      <h2>{movie.Title}</h2>\r\n      <div>\r\n        <img src={poster} alt={`The movie titled: ${movie.Title}`} width='200'/>\r\n      </div>\r\n      <p>({movie.Year})</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movie;","export const initialState = {\r\n  loading: true,\r\n  movies: [],\r\n  errorMessage: null \r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SEARCH_MOVIE_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        errorMessage: null\r\n      };\r\n    case 'SEARCH_MOVIE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        movies: action.payload\r\n      };\r\n    case 'SEARCH_MOVIES_FAILURE':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMessage: action.error\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, {useEffect, useReducer} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Movie from './components/Movie';\nimport { reducer, initialState } from './reducer';\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=a5c89c1a\"; \n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then((res) => res.json())\n      .then((resJSON)=> {\n        dispatch({type: 'SEARCH_MOVIE_SUCCESS', payload: resJSON.Search})\n      })\n  }, []);\n\n  const searchMovie = (searchValue) => {\n    dispatch({type: 'SEARCH_MOVIE_REQUEST'})\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=a5c89c1a`)\n      .then((res) => res.json())\n      .then((resJSON) => {\n        if (resJSON.Response === 'True') {\n          dispatch({type: 'SEARCH_MOVIE_SUCCESS', payload: resJSON.Search})\n        } else {\n          dispatch({type: 'SEARCH_MOVIES_FAILURE', error: resJSON.Error})\n        }\n      });\n  }\n\n  const { movies, errorMessage, loading } = state;\n  return (\n    <div className=\"App\">\n      <Header text='YOUR MOVIE'/>\n      <Search searchMovie={searchMovie}/>\n      <p className=\"App-intro\">Search movie by your name</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (<Movie key={`${index}-${movie.Title}`} movie={movie}/>))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}